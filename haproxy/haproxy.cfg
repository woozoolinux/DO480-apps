#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

# ---------------------------------------------------------------------
# Exposing HAProxy Statistic Page
# ---------------------------------------------------------------------
listen stats
    bind :32700
    stats enable
    stats uri /
    stats hide-version
    stats auth admin:RedH@t480


# BEGIN ANSIBLE MANAGED HAPROXY CONFIG for ocp4.example.com
#---------------------------------------------------------------------
# round robin balancing for OCP4 Kubernetes API Server
#---------------------------------------------------------------------
frontend k8s_api_ocp4
  bind 192.168.50.254:6443
  mode tcp
  default_backend k8s_api_backend_ocp4
backend k8s_api_backend_ocp4
  balance roundrobin
  mode tcp
  # example:
    server master101 192.168.50.10:6443 check
    server master102 192.168.50.11:6443 check
    server master103 192.168.50.12:6443 check
      
# ---------------------------------------------------------------------
# round robin balancing for OCP4 Machine Config Server
# ---------------------------------------------------------------------
frontend machine_config_ocp4
  bind 192.168.50.254:22623
  mode tcp
  default_backend machine_config_backend_ocp4
backend machine_config_backend_ocp4
  balance roundrobin
  mode tcp
  # example:
    server master101 192.168.50.10:22623 check
    server master102 192.168.50.11:22623 check
    server master103 192.168.50.12:22623 check
      
# ---------------------------------------------------------------------
# round robin balancing for OCP4 Ingress Insecure Port
# ---------------------------------------------------------------------
frontend ingress_insecure_ocp4
  bind 192.168.50.254:80
  mode tcp
  default_backend ingress_insecure_backend_ocp4
backend ingress_insecure_backend_ocp4
  balance roundrobin
  mode tcp
  # example:
  # server master01 192.168.50.10:80 check
    server master101 192.168.50.10:80 check
    server master102 192.168.50.11:80 check
    server master103 192.168.50.12:80 check
      
# ---------------------------------------------------------------------
# round robin balancing for OCP4 Ingress Secure Port
# ---------------------------------------------------------------------
frontend ingress_secure_ocp4
  bind 192.168.50.254:443
  mode tcp
  default_backend ingress_secure_backend_ocp4
backend ingress_secure_backend_ocp4
  balance roundrobin
  mode tcp
  # example:
  # server master01 192.168.50.10:443 check
    server master101 192.168.50.10:443 check
    server master102 192.168.50.11:443 check
    server master103 192.168.50.12:443 check
      

# END ANSIBLE MANAGED HAPROXY CONFIG for ocp4.example.com
# BEGIN ANSIBLE MANAGED HAPROXY CONFIG for ocp4-mng.example.com
#---------------------------------------------------------------------
# round robin balancing for OCP4 Kubernetes API Server
#---------------------------------------------------------------------
frontend k8s_api_ocp4-mng
  bind 192.168.51.254:6443
  mode tcp
  default_backend k8s_api_backend_ocp4-mng
backend k8s_api_backend_ocp4-mng
  balance roundrobin
  mode tcp
  # example:
    server master201 192.168.51.10:6443 check
    server master202 192.168.51.11:6443 check
    server master203 192.168.51.12:6443 check
      
# ---------------------------------------------------------------------
# round robin balancing for OCP4 Machine Config Server
# ---------------------------------------------------------------------
frontend machine_config_ocp4-mng
  bind 192.168.51.254:22623
  mode tcp
  default_backend machine_config_backend_ocp4-mng
backend machine_config_backend_ocp4-mng
  balance roundrobin
  mode tcp
  # example:
    server master201 192.168.51.10:22623 check
    server master202 192.168.51.11:22623 check
    server master203 192.168.51.12:22623 check
      
# ---------------------------------------------------------------------
# round robin balancing for OCP4 Ingress Insecure Port
# ---------------------------------------------------------------------
frontend ingress_insecure_ocp4-mng
  bind 192.168.51.254:80
  mode tcp
  default_backend ingress_insecure_backend_ocp4-mng
backend ingress_insecure_backend_ocp4-mng
  balance roundrobin
  mode tcp
  # example:
  # server master01 192.168.50.10:80 check
    server master201 192.168.51.10:80 check
    server master202 192.168.51.11:80 check
    server master203 192.168.51.12:80 check
      
# ---------------------------------------------------------------------
# round robin balancing for OCP4 Ingress Secure Port
# ---------------------------------------------------------------------
frontend ingress_secure_ocp4-mng
  bind 192.168.51.254:443
  mode tcp
  default_backend ingress_secure_backend_ocp4-mng
backend ingress_secure_backend_ocp4-mng
  balance roundrobin
  mode tcp
  # example:
  # server master01 192.168.50.10:443 check
    server master201 192.168.51.10:443 check
    server master202 192.168.51.11:443 check
    server master203 192.168.51.12:443 check
      

# END ANSIBLE MANAGED HAPROXY CONFIG for ocp4-mng.example.com
